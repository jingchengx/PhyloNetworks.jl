using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "fastme", :fastme),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/jokeitei/PhyloNetworksBuilder/releases/download/2.1.6.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/PhyloNetworks.v0.11.0.aarch64-linux-gnu.tar.gz", "9178dcf108e020f283ca867b42b0b34ef28f433c6505734856aae3e169dc3c45"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/PhyloNetworks.v0.11.0.aarch64-linux-musl.tar.gz", "9a3cac658a7c2157927529c270413ace093706e5252cecfb4f2a91d78c11db67"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/PhyloNetworks.v0.11.0.arm-linux-gnueabihf.tar.gz", "1d9f2d42e71b2db8ed28cc2a8e3dc26fe9dc2283861e1b53186ac035172e3653"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/PhyloNetworks.v0.11.0.arm-linux-musleabihf.tar.gz", "85026d2d1debd9ef312bb1855c3f21615d60614f5bdd60f7477d06a5ea96dae6"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/PhyloNetworks.v0.11.0.i686-linux-gnu.tar.gz", "ae00f2920e58782aa9c4f2fe8c60f8d5316e9dd57cdbc19c01241dcb1d500a39"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/PhyloNetworks.v0.11.0.i686-linux-musl.tar.gz", "8d32022b49364ae69400307a0bf742e6f2b9c689306632b3c7bd3b012dd4163d"),
    Windows(:i686) => ("$bin_prefix/PhyloNetworks.v0.11.0.i686-w64-mingw32.tar.gz", "23ee121f9da619c387fc3a8e1e21fd70790102441e3fbca6359dd2a86779150d"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/PhyloNetworks.v0.11.0.powerpc64le-linux-gnu.tar.gz", "eefe9c1196685f2326541e20ef55bba0a5fca3904de2b864632e8c5a1b679ae0"),
    MacOS(:x86_64) => ("$bin_prefix/PhyloNetworks.v0.11.0.x86_64-apple-darwin14.tar.gz", "a1b78be047b42be509361fc587d2dcc7a6ff2442bb277e436fb841306d44e50a"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/PhyloNetworks.v0.11.0.x86_64-linux-gnu.tar.gz", "e7f38dc26a123c8e2245de637d755c526e36f4f89ea220969fc4f086acc92634"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/PhyloNetworks.v0.11.0.x86_64-linux-musl.tar.gz", "4a49366bc7b474f13d280c38e2d295327f5b2255ea931bf5d8d5d03627d5546f"),
    FreeBSD(:x86_64) => ("$bin_prefix/PhyloNetworks.v0.11.0.x86_64-unknown-freebsd11.1.tar.gz", "e2130d77e11425f30fb74fd168bbb48c52fd6088c813aa1c82a7c76b00c9725d"),
    Windows(:x86_64) => ("$bin_prefix/PhyloNetworks.v0.11.0.x86_64-w64-mingw32.tar.gz", "f981f79708f791ff290e88afb869689b608e7d07fc7f632e8d186a9a78dca0fc"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
